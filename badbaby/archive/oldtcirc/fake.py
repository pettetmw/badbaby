#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 17 07:46:15 2020

@author: pettetmw
"""

import subprocess
import re

# first a function to invoke linux commands and get strings of stdout

# lnx = lambda c: subprocess.run(c, 
#                 stdout=subprocess.PIPE,shell=True
#                 ).stdout.decode('utf-8').split('\n')[0:-1]

lnx = lambda c: subprocess.Popen("bash -O extglob -c '" + c + "'",
  stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, encoding='utf-8'
  ).communicate()[0].split('\n')[0:-1]

# now a function to invoke make, with implicit global pattern matching
def fake( aTrg, *aSRStrs ) :
    tTrgs = lnx('ls -1 ' + aTrg) # it aTrg is a glob, tTrgs becomes a list
    if len(tTrgs)>0 :
        aTrg = tTrgs
    else :
        aTrg = [aTrg]
    # if a seqeunce of regexp search/replace stings is provided
    if len(aSRStrs) > 0 :
        for SR in aSRStrs : # do all the regular expression string substitution
            aTrg = [ re.compile(SR[0]).sub(SR[1],t) for t in aTrg ] # for all the targets
    
    return lnx( 'make -s ' + ' '.join(aTrg) ) # invoke make on the list of targets to get fake commands
    #print( 'make -s ' + ' '.join(aTrg) ) # alternate for debugging

def fakeout( aTrg, *aSRStrs ) : print( fake( aTrg, *aSRStrs ) )

# e.g.: fake('../tone/*/epochs/*-epo.fif', [r'../tone/.+/epochs/','tcircevo/'], ['epo.fif','ave.fif'] )


# If following Makefile exists in current dir:

# NodeB/s% : NodeA/s%
# 	echo makeTargetFromPrereq $@ $<

# then we can define functions to force updating of target or prereq that can
# be subbed into a makefile recipe
fakeTargetFromPrereq = lambda t,p: lnx('touch ' + t) 

# and a lookup dict to execute function given a string matching it's name.
fakefnx = dict( fakeTargetFromPrereq=fakeTargetFromPrereq )
# this can be appended to include functions defined in the context that this
# module is included, e.g.:
# fakefnx.update( dict(makeTcircevoFromEpo=makeTcircevoFromEpo) )

# Define function to process a command string ("c") generated by fake,
# by invoking fakefnx function named in first word, and passing the remaining
# words to it as arguments
def fakeit( aTrg, *aSRStrs ) : [ fakefnx[c.split()[0]](*c.split()[1:]) for c in fake( aTrg, *aSRStrs ) ]

# comments from two different versions follow; needs to be cleaned up.

# lnx('mkdir NodeA NodeB') # create prereq and target directories
# lnx('touch' + ' '.join([' NodeA/s0'+str(i) for i in [1,2,3]])) # create prereqs for three serial ids

# # get the fake commands to create the corresponding targets
# fakecs = fake( ' '.join([ s.replace('A','B') for s in lnx('ls -1 NodeA/*') ]) )

# # should return
# # ['makeTargetFromPrereq NodeB/s01 NodeA/s01',
# #  'makeTargetFromPrereq NodeB/s02 NodeA/s02',
# #  'makeTargetFromPrereq NodeB/s03 NodeA/s03']

# [ fakeit(c) for c in fakecs ] # process all the fake commands

# # now update one of the prereqs:

# lnx('touch NodeA/s02')
# # checking for out-of-date targets is very simple
# fake('NodeB/s*')
# #Out[62]: ['makeTargetFromPrereq NodeB/s02 NodeA/s02']

# e.g. of usage:
# fakefnx.update( dict(makeTcircevoFromEpo=makeTcircevoFromEpo) )
# fake('../tone/*/epochs/*-epo.fif', [r'../tone/.+/epochs/','tcircevo/'], ['epo.fif','ave.fif'] )

# generates:
# 'makeTcircevoFromEpo tcircevo/All_100-sss_bad_923b-ave.fif ../tone/bad_923b/epochs/All_100-sss_bad_923b-epo.fif',
#  'makeTcircevoFromEpo tcircevo/All_100-sss_bad_925a-ave.fif ../tone/bad_925a/epochs/All_100-sss_bad_925a-epo.fif',
#  'makeTcircevoFromEpo tcircevo/All_100-sss_bad_925b-ave.fif ../tone/bad_925b/epochs/All_100-sss_bad_925b-epo.fif'
 
#  and, fakeit implements those commands










